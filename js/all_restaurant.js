class DBHelper{static get DATABASE_URL(){return"http://localhost:1337/"}static get RESTAURANTS_STORE(){return"restaurants"}static get REVIEWS_STORE(){return"reviews"}static get PENDING_REVIEWS(){return"pending"}static get dB(){return DBHelper._dB?Promise.resolve(DBHelper._dB):new Promise((e,t)=>{const r=indexedDB.open("restaurant-reviews",2);r.onerror=(()=>t()),r.onupgradeneeded=(()=>{const e=r.result,t=e.createObjectStore(DBHelper.RESTAURANTS_STORE,{keyPath:"id"}),n=e.createObjectStore(DBHelper.REVIEWS_STORE,{keyPath:"id"}),a=e.createObjectStore(DBHelper.PENDING_REVIEWS,{autoIncrement:!0});t.createIndex("id","id"),t.createIndex("cuisine","cuisine_type"),t.createIndex("neighborhood","neighborhood"),n.createIndex("restaurant_id","restaurant_id"),a.createIndex("restaurant_id","restaurant_id")}),r.onsuccess=(t=>{DBHelper._dB=r.result,e(DBHelper._dB)})})}static putDataInDb(e,t){return DBHelper.dB.then(r=>{const n=r.transaction(e,"readwrite").objectStore(e);t.forEach(e=>{n.put(e)})}).catch(r=>{console.log(`Whoops! Couldn't set data: ${e} ${t}`,r.message)})}static getRestaurantsFromDb(e){return DBHelper.dB.then(t=>{const r=t.transaction(DBHelper.RESTAURANTS_STORE,"readonly").objectStore(DBHelper.RESTAURANTS_STORE);return e?r.getAll(e):r.getAll()}).then(e=>new Promise(t=>{e.onsuccess=(()=>t(e.result))})).catch(()=>{console.log(`Whoops! Couldn't return data for restaurant ${e}`)})}static getReviewsFromDb(e){return DBHelper.dB.then(t=>{const r=t.transaction(DBHelper.REVIEWS_STORE,"readonly").objectStore(DBHelper.REVIEWS_STORE).index("restaurant_id"),n=t.transaction(DBHelper.PENDING_REVIEWS,"readonly").objectStore(DBHelper.PENDING_REVIEWS).index("restaurant_id");return Promise.all([r,n].map(t=>new Promise(r=>{const n=e?t.getAll(e):t.getAll();n.onsuccess=(()=>r(n.result))})))}).then(([e,t])=>[...e,...t]).catch(t=>{console.log(`Whoops! Couldn't return reviews for restaurant ${e}`,t.message)})}static fetchRestaurants(e,t=""){let r=e;DBHelper.getRestaurantsFromDb(t).then(e=>{e&&e.length>0&&(r(null,e),r=(()=>{}))}).then(()=>fetch(`${DBHelper.DATABASE_URL}restaurants/${t}`)).then(e=>e.json()).then(e=>{Array.isArray(e)||(e=[e]),DBHelper.putDataInDb(DBHelper.RESTAURANTS_STORE,e),r(null,e)}).catch(e=>{r(`Whoops! ${e.message}`,null)})}static fetchReviews(e,t){let r=e;DBHelper.getReviewsFromDb(t).then(e=>{e&&e.length>0&&(r(e),r=(()=>{}))}).then(()=>fetch(`${DBHelper.DATABASE_URL}reviews/?restaurant_id=${t}`)).then(e=>e.json()).then(e=>{Array.isArray(e)||(e=[e]),DBHelper.putDataInDb(DBHelper.REVIEWS_STORE,e),r(e)}).catch(e=>{console.error(`Request failed. ${e.message}`),r([])})}static fetchRestaurantById(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.find(t=>t.id==e);r?t(null,r):t("Restaurant does not exist",null)}},e)}static fetchRestaurantByCuisine(e,t){DBHelper.fetchRestaurants((e,r)=>{if(e)t(e,null);else{const e=r.find(e=>e.id==id);e?t(null,e):t("Restaurant does not exist",null)}},id)}static fetchRestaurantByNeighborhood(e,t){DBHelper.fetchRestaurants((r,n)=>{if(r)t(r,null);else{const r=n.filter(t=>t.neighborhood==e);t(null,r)}})}static fetchRestaurantByCuisineAndNeighborhood(e,t,r){DBHelper.fetchRestaurants((n,a)=>{if(n)r(n,null);else{let n=a;"all"!=e&&(n=n.filter(t=>t.cuisine_type==e)),"all"!=t&&(n=n.filter(e=>e.neighborhood==t)),r(null,n)}})}static fetchNeighborhoods(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].neighborhood),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static fetchCuisines(e){DBHelper.fetchRestaurants((t,r)=>{if(t)e(t,null);else{const t=r.map((e,t)=>r[t].cuisine_type),n=t.filter((e,r)=>t.indexOf(e)==r);e(null,n)}})}static urlForRestaurant(e){return`./restaurant.html?id=${e.id}`}static imageUrlForRestaurant(e,t=""){return`/img/${e.id}${t}.webp`}static mapMarkerForRestaurant(e,t){return new google.maps.Marker({position:e.latlng,title:e.name,url:DBHelper.urlForRestaurant(e),map:t,animation:google.maps.Animation.DROP})}static setRestaurantAsFavorite(e,t){let r=!!t&&"true";fetch(`${DBHelper.DATABASE_URL}restaurants/${e}/?is_favorite=${r}`,{method:"PUT"}).then(e=>e.json()).then(e=>{DBHelper.putDataInDb(DBHelper.RESTAURANTS_STORE,[e])}).catch(e=>{console.error(`Couldn't change favorite restaurant: ${e.message}`)})}static addReviewToPending(e){return DBHelper.putDataInDb(DBHelper.PENDING_REVIEWS,[e])}static sendReview(e,t){return DBHelper.addReviewToPending(e).then(()=>navigator.serviceWorker.ready).then(e=>e.sync.register("send-reviews")).catch(r=>{DBHelper.emptyPending(),DBHelper.updateServerReviews([e]).then(()=>t())}).catch(e=>console.error(e.message))}static updateServerReviews(e){return fetch(`${DBHelper.DATABASE_URL}reviews/`,{method:"post",body:JSON.stringify(e)}).then(e=>e.json()).then(e=>{DBHelper.putDataInDb(DBHelper.REVIEWS_STORE,[e])})}static emptyPending(){return DBHelper.dB.then(e=>{return e.transaction(DBHelper.PENDING_REVIEWS,"readwrite").objectStore(DBHelper.PENDING_REVIEWS).clear()}).then(e=>new Promise(t=>{e.onsuccess=(()=>t())})).catch(e=>console.warn(`Couldn't clear pending reviews: ${e.message}`))}}
document.addEventListener("DOMContentLoaded",e=>{const o=document.getElementsByTagName("head")[0],n=o.insertBefore;o.insertBefore=function(e,r){e.href&&e.href.indexOf("//fonts.googleapis.com/css?family=Roboto")>-1||n.call(o,e,r)}}),"serviceWorker"in navigator&&window.addEventListener("load",function(){navigator.serviceWorker.register("sw.js").then(function(e){console.log("ServiceWorker registration successful with scope: ",e.scope)},function(e){console.log("ServiceWorker registration failed: ",e)})});
let restaurant,map;document.addEventListener("DOMContentLoaded",e=>{navigator.serviceWorker&&navigator.serviceWorker.addEventListener("message",e=>{"update-reviews"===e.data&&DBHelper.fetchReviews(e=>{fillReviewsHTML(e)},self.restaurant.id)});const t=document.getElementById("review_form");t.addEventListener("submit",e=>(e.preventDefault&&e.preventDefault(),addReview(t,e),!1)),DBHelper.dB.then(()=>{fetchRestaurantFromURL((e,t)=>{fillBreadcrumb(),map&&initMap()})})}),window.initMap=(()=>{if(self.restaurant){try{self.map=new google.maps.Map(document.getElementById("map"),{zoom:16,center:self.restaurant.latlng,scrollwheel:!1})}catch(e){console.warn(`Map Error: ${e}`)}DBHelper.mapMarkerForRestaurant(self.restaurant,self.map)}else map=!0}),fetchRestaurantFromURL=(e=>{if(self.restaurant)return void e(null,self.restaurant);const t=getParameterByName("id");t?DBHelper.fetchRestaurantById(t,(t,a)=>{self.restaurant=a,a?(fillRestaurantHTML(),e(null,a)):console.error(t)}):e("No restaurant id in URL",null)}),fillRestaurantHTML=((e=self.restaurant)=>{const t=document.getElementById("restaurant-name");t.className="restaurant-name",t.innerHTML=e.name;const a=document.getElementById("restaurant-address");a.className="restaurant-address",a.setAttribute("aria-label","Address for "+e.name),a.innerHTML=e.address;const n=document.getElementById("restaurant-img");n.alt=`${e.name} - ${e.neighborhood}`,n.className="restaurant-img",n.src=DBHelper.imageUrlForRestaurant(e,"-md"),n.setAttribute("srcset",`${DBHelper.imageUrlForRestaurant(e)} 800w, ${DBHelper.imageUrlForRestaurant(e,"-md")} 600w, ${DBHelper.imageUrlForRestaurant(e,"-sm")} 300w`),n.setAttribute("sizes","(min-width: 1510px), (max-width: 15100px), (max-width: 840px)");const r=document.getElementById("restaurant-cuisine");r.className="restaurant-cuisine",a.setAttribute("aria-label","Cuisine Type"),r.innerHTML=e.cuisine_type;const s=document.getElementById("restaurant-isFavorite");s.checked="true"==e.is_favorite,s.onchange=(()=>{DBHelper.setRestaurantAsFavorite(e.id,s.checked),updateIsFaveContainer(s.checked)}),updateIsFaveContainer(s.checked),e.operating_hours&&fillRestaurantHoursHTML(),DBHelper.fetchReviews(e=>fillReviewsHTML(e),e.id)}),updateIsFaveContainer=(e=>{const t=document.getElementById("restaurant-isFavorite-container");e?t.setAttribute("class","isFave"):t.setAttribute("class","notFave")}),fillRestaurantHoursHTML=((e=self.restaurant.operating_hours)=>{const t=document.getElementById("restaurant-hours");t.className="restaurant-hours";for(let a in e){const n=document.createElement("tr"),r=document.createElement("td");r.innerHTML=a,n.appendChild(r);const s=document.createElement("td");s.innerHTML=e[a],n.appendChild(s),t.appendChild(n)}}),fillReviewsHTML=(e=>{const t=document.getElementById("reviews-list");if(t.innerHTML="",!e){const e=document.createElement("li");return e.innerHTML="No reviews yet!",void t.appendChild(e)}let a;for(a of e)t.appendChild(createReviewHTML(a))}),createReviewHTML=(e=>{const t=document.createElement("li");t.className="review-container";const a=document.createElement("div");a.className="review-header",t.appendChild(a);const n=document.createElement("div");n.setAttribute("aria-label","Reviewer name"),n.className="review-name",n.innerHTML=e.name,a.appendChild(n);const r=document.createElement("div");if(r.setAttribute("aria-label","Review date"),r.className="review-date",e.updatedAt){let t=new Date(e.updatedAt);r.innerHTML=t.toDateString()}else r.innerHTML="Pending";a.appendChild(r);const s=document.createElement("p");s.setAttribute("aria-label","Review rating"),s.className="review-rating",s.innerHTML=`Rating: ${e.rating}`,t.appendChild(s);const i=document.createElement("p");return i.setAttribute("aria-label","Review comments"),i.className="review-comments",i.innerHTML=e.comments,t.appendChild(i),t}),fillBreadcrumb=((e=self.restaurant)=>{const t=document.getElementById("breadcrumb"),a=document.createElement("li");a.innerHTML=e.name,t.appendChild(a)}),getParameterByName=((e,t)=>{t||(t=window.location.href),e=e.replace(/[\[\]]/g,"\\$&");const a=new RegExp(`[?&]${e}(=([^&#]*)|&|#|$)`).exec(t);return a?a[2]?decodeURIComponent(a[2].replace(/\+/g," ")):"":null}),addReview=((e,t)=>{const a=formToJSON(e.elements);Object.assign(a,{restaurant_id:self.restaurant.id});const n=createReviewHTML(a);document.getElementById("reviews-list").append(n),DBHelper.sendReview(a,()=>DBHelper.fetchReviews(e=>fillReviewsHTML(e),self.restaurant.id))}),formToJSON=(e=>[].reduce.call(e,(e,t)=>(""!=t.name&&(e[t.name]=t.value),e),{}));
